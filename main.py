import logging
import asyncio
import os
import sqlite3
from datetime import datetime, timedelta
from collections import defaultdict
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message, FSInputFile
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
import openpyxl
from openpyxl.utils import get_column_letter

load_dotenv()

API_TOKEN = os.getenv("BOT_TOKEN")
GROUP_CHAT_ID = int(os.getenv("GROUP_CHAT_ID"))

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()

DB_PATH = 'requests.db'

class Form(StatesGroup):
    supplier = State()
    amount = State()
    description = State()
    agent_name = State()
    agent_phone = State()
    delivery_date = State()
    admin_name = State()

def init_db():
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
   
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    cur.execute("""
        CREATE TABLE IF NOT EXISTS requests (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            username TEXT,
            supplier TEXT,
            amount REAL,
            agent_name TEXT,
            agent_phone TEXT,
            delivery_date TEXT,
            admin_name TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    """)
   
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–Ω–∫–∏ description –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    cur.execute("PRAGMA table_info(requests)")
    columns = [column[1] for column in cur.fetchall()]
    if 'description' not in columns:
        cur.execute("ALTER TABLE requests ADD COLUMN description TEXT")
   
    conn.commit()
    conn.close()

def generate_excel_by_date(date_str):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("""
        SELECT supplier, amount, description, agent_name, agent_phone, delivery_date, admin_name, username
        FROM requests WHERE delivery_date = ?
    """, (date_str,))
    rows = cur.fetchall()
    conn.close()

    if not rows:
        return None

    wb = openpyxl.Workbook()
    ws = wb.active
    ws.title = "–ó–∞—è–≤–∫–∏"
    ws.append(['–ü–æ—Å—Ç–∞–≤—â–∏–∫','–°—É–º–º–∞','–û–ø–∏—Å–∞–Ω–∏–µ','–ò–º—è –∞–≥–µ–Ω—Ç–∞','–ù–æ–º–µ—Ä','–î–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏','–ê–¥–º–∏–Ω','–û—Ç –∫–æ–≥–æ'])
    total = 0

    for row in rows:
        amount = float(row[1])
        excel_row = [
            row[0],          # supplier
            amount,          # real number
            row[2],          # description
            row[3],          # agent_name
            row[4],          # agent_phone
            row[5],          # delivery_date
            row[6],          # admin_name
            row[7]           # username
        ]
        ws.append(excel_row)
        total += amount

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç –∫ –∫–æ–ª–æ–Ω–∫–µ "–°—É–º–º–∞"
    for row in ws.iter_rows(min_row=2, max_row=ws.max_row, min_col=2, max_col=2):
        for cell in row:
            cell.number_format = '#,##0'
   
    # –ê–≤—Ç–æ—à–∏—Ä–∏–Ω–∞
    for col in ws.columns:
        max_len = max(len(str(cell.value)) if cell.value else 0 for cell in col)
        ws.column_dimensions[get_column_letter(col[0].column)].width = max_len + 3

    # –ò—Ç–æ–≥
    ws.append([])
    total_formatted = "{:,.0f}".format(total).replace(",", ".")
    ws.append(['', 'üí∞ –û–±—â–∞—è —Å—É–º–º–∞:', total_formatted])

    for col in ws.columns:
        max_len = max(len(str(cell.value)) if cell.value else 0 for cell in col)
        ws.column_dimensions[get_column_letter(col[0].column)].width = max_len + 3

    filename = f"–ó–∞—è–≤–∫–∏_{date_str}.xlsx"
    wb.save(filename)
    return filename

@router.message(CommandStart())
async def start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ –∑–∞—è–≤–æ–∫. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /–∑–∞—è–≤–∫–∞ —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É.")

@router.message(Command("–ø–æ—Å—Ç–∞–≤–∫–∏"))
async def show_deliveries(message: Message):
    parts = message.text.split()
    if len(parts) > 1:
        try:
            date_str = datetime.strptime(parts[1], "%d.%m.%Y").strftime("%Y-%m-%d")
        except ValueError:
            return await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π: /–ø–æ—Å—Ç–∞–≤–∫–∏ –¥–¥.–º–º.–≥–≥–≥–≥")
    else:
        date_str = datetime.now().strftime("%Y-%m-%d")

    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("""
        SELECT supplier, amount, description FROM requests
        WHERE delivery_date = ?
    """, (date_str,))
    rows = cur.fetchall()
    conn.close()

    if not rows:
        return await message.answer(f"üì≠ –ù–µ—Ç –ø–æ—Å—Ç–∞–≤–æ–∫ –Ω–∞ {date_str}.")

    total = sum(float(row[1]) for row in rows)
    total_formatted = "{:,.0f}".format(total).replace(",", ".")
   
    text = f"üì¶ –ü–æ—Å—Ç–∞–≤–∫–∏ –Ω–∞ {datetime.strptime(date_str, '%Y-%m-%d').strftime('%d.%m.%Y')}:\n"
    for i, row in enumerate(rows, 1):
        amount_formatted = "{:,.0f}".format(float(row[1])).replace(",", ".")
        text += f"\n{i}) –ü–æ—Å—Ç–∞–≤—â–∏–∫: {row[0]}\n–°—É–º–º–∞: {amount_formatted}"
        if row[2]:  # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            text += f"\n–û–ø–∏—Å–∞–Ω–∏–µ: {row[2]}"
        text += "\n"  # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–±–µ–ª –º–µ–∂–¥—É –∑–∞—è–≤–∫–∞–º–∏

    text += f"\nüí∞ –û–±—â–∞—è —Å—É–º–º–∞ –ø–æ—Å—Ç–∞–≤–æ–∫: {total_formatted}"
    await message.answer(text)

@router.message(Command("–∑–∞—è–≤–∫–∞"))
async def start_form(message: Message, state: FSMContext):
    await state.set_state(Form.supplier)
    await message.answer("–í–≤–µ–¥–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:")

@router.message(Form.supplier)
async def step_supplier(message: Message, state: FSMContext):
    await state.update_data(supplier=message.text)
    await state.set_state(Form.amount)
    await message.answer("–í–≤–µ–¥–∏ —Å—É–º–º—É:")

@router.message(Form.amount)
async def step_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text.replace(',', '.').replace(' ', ''))
    except:
        return await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏ —á–∏—Å–ª–æ.")
    await state.update_data(amount=amount)
    await state.set_state(Form.description)
    await message.answer("–í–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ):")

@router.message(Form.description)
async def step_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(Form.agent_name)
    await message.answer("–ò–º—è –∞–≥–µ–Ω—Ç–∞:")

@router.message(Form.agent_name)
async def step_agent_name(message: Message, state: FSMContext):
    await state.update_data(agent_name=message.text)
    await state.set_state(Form.agent_phone)
    await message.answer("–ù–æ–º–µ—Ä –∞–≥–µ–Ω—Ç–∞:")

@router.message(Form.agent_phone)
async def step_agent_phone(message: Message, state: FSMContext):
    await state.update_data(agent_phone=message.text)
    await state.set_state(Form.delivery_date)
    await message.answer("–î–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏ (–¥–¥.–º–º.–≥–≥–≥–≥):")

@router.message(Form.delivery_date)
async def step_delivery_date(message: Message, state: FSMContext):
    try:
        date_obj = datetime.strptime(message.text, "%d.%m.%Y").date()
        await state.update_data(delivery_date=date_obj.strftime("%Y-%m-%d"))
        await state.set_state(Form.admin_name)
        await message.answer("–ò–º—è –∞–¥–º–∏–Ω–∞:")
    except:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏ –î–î.–ú–ú.–ì–ì–ì–ì")

@router.message(Form.admin_name)
async def step_admin_name(message: Message, state: FSMContext):
    await state.update_data(admin_name=message.text)
    data = await state.get_data()
    user = message.from_user

    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("""
        INSERT INTO requests (user_id, username, supplier, amount, description, agent_name, agent_phone, delivery_date, admin_name)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
    """, (
        user.id, user.full_name, data['supplier'], data['amount'], data.get('description', ''),
        data['agent_name'], data['agent_phone'], data['delivery_date'], data['admin_name']
    ))
    conn.commit()
    conn.close()

    await state.clear()
    await message.answer("‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
   
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã
    message_text = (
        f"üì¶ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç {user.full_name}:\n\n"
        f"–ü–æ—Å—Ç–∞–≤—â–∏–∫: {data['supplier']}\n"
        f"–°—É–º–º–∞: {data['amount']}\n"
    )
   
    if data.get('description'):
        message_text += f"–û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}\n"
       
    message_text += (
        f"–ê–≥–µ–Ω—Ç: {data['agent_name']}\n"
        f"–ù–æ–º–µ—Ä: {data['agent_phone']}\n"
        f"–î–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏: {data['delivery_date']}\n"
        f"–ê–¥–º–∏–Ω: {data['admin_name']}\n"
    )
   
    await bot.send_message(GROUP_CHAT_ID, message_text)

@router.message(Command("–∑–∞—è–≤–∫–∏"))
async def list_requests(message: Message):
    parts = message.text.split()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
    if len(parts) > 1:
        try:
            target_date = datetime.strptime(parts[1], "%d.%m.%Y").date()
        except:
            return await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π: /–∑–∞—è–≤–∫–∏ –¥–¥.–º–º.–≥–≥–≥–≥")
    else:
        # –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –±–µ—Ä—ë–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é
        target_date = datetime.now().date()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –¥–Ω—è
    date_start = datetime.combine(target_date, datetime.min.time())
    date_end = datetime.combine(target_date, datetime.max.time())

    # –ó–∞–ø—Ä–æ—Å –ø–æ –¥–∞—Ç–µ –°–û–ó–î–ê–ù–ò–Ø –∑–∞—è–≤–∫–∏ (–ø–æ–ª–µ created_at)
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("""
        SELECT supplier, amount, description, agent_name, agent_phone, delivery_date, admin_name, username, created_at
        FROM requests
        WHERE created_at BETWEEN ? AND ?
    """, (date_start, date_end))
    rows = cur.fetchall()
    conn.close()

    if not rows:
        return await message.answer(f"üì≠ –ù–µ—Ç –∑–∞—è–≤–æ–∫ –∑–∞ {target_date.strftime('%d.%m.%Y')}.")

    total = sum(float(r[1]) for r in rows)
    total_formatted = "{:,.0f}".format(total).replace(",", ".")

    text = f"üì¶ –ó–∞—è–≤–∫–∏ –∑–∞ {target_date.strftime('%d.%m.%Y')}:\n\n"
    for i, r in enumerate(rows, 1):
        amount_formatted = "{:,.0f}".format(float(r[1])).replace(",", ".")
        text += (
            f"{i}) –ü–æ—Å—Ç–∞–≤—â–∏–∫: {r[0]}\n"
            f"–°—É–º–º–∞: {amount_formatted}\n"
        )
        if r[2]:  # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            text += f"–û–ø–∏—Å–∞–Ω–∏–µ: {r[2]}\n"
        text += (
            f"–ê–≥–µ–Ω—Ç: {r[3]}\n"
            f"–ù–æ–º–µ—Ä: {r[4]}\n"
            f"–î–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏: {datetime.strptime(r[5], '%Y-%m-%d').strftime('%d.%m.%Y')}\n"
            f"–ê–¥–º–∏–Ω: {r[6]}\n"
            f"–û—Ç –∫–æ–≥–æ: {r[7]}\n\n"
        )

    text += f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞—è–≤–æ–∫: {total_formatted}"
    await message.answer(text)

@router.message(Command("—ç–∫—Å–ø–æ—Ä—Ç"))
async def export_requests(message: Message):
    date_str = datetime.now().strftime("%Y-%m-%d")
    filename = generate_excel_by_date(date_str)
    if filename:
        await message.answer_document(FSInputFile(filename))
        os.remove(filename)
    else:
        await message.answer("–ù–µ—Ç –∑–∞—è–≤–æ–∫ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")

async def scheduler():
    while True:
        now = datetime.now()
        if now.time().hour == 19 and now.time().minute == 00:
            date_str = now.strftime("%Y-%m-%d")
            filename = generate_excel_by_date(date_str)
            if filename:
                await bot.send_document(GROUP_CHAT_ID, FSInputFile(filename), caption=f"üìÑ –ó–∞—è–≤–∫–∏ –∑–∞ {date_str}")
                os.remove(filename)
        await asyncio.sleep(60)

async def main():
    init_db()
    dp.include_router(router)
    asyncio.create_task(scheduler())
    await dp.start_polling(bot, polling_timeout=30)

if __name__ == '__main__':
    asyncio.run(main())
